{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenMod Dcoumentation \u00b6 OpenMod is a .NET plugin framework. If you would like to install OpenMod, installation guides for the following platforms are available: Unturned If you want to make plugins for OpenMod, you can get started by reading the Making your first plugin page.","title":"Home"},{"location":"#welcome-to-openmod-dcoumentation","text":"OpenMod is a .NET plugin framework. If you would like to install OpenMod, installation guides for the following platforms are available: Unturned If you want to make plugins for OpenMod, you can get started by reading the Making your first plugin page.","title":"Welcome to OpenMod Dcoumentation"},{"location":"development-guide/commands/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Commands"},{"location":"development-guide/configurations/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Configurations"},{"location":"development-guide/logging/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Logging"},{"location":"development-guide/making-your-first-plugin/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Making your first plugin"},{"location":"development-guide/permissions/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Permissions"},{"location":"development-guide/scheduling/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Scheduling"},{"location":"development-guide/events/builtin-events/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Built-in Events"},{"location":"development-guide/events/events/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"OpenMod Events"},{"location":"development-guide/events/game-events/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Game Events"},{"location":"user-guide/configurations/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Configurations"},{"location":"user-guide/logging/","text":"Logging \u00b6 OpenMod uses Serilog by default for logging. Serilog is configured through the logging.yaml in the OpenMod directory. You can find the documentation for the Serilog configuration here (you will have to convert from json to yaml). Serilog supports many sinks as logging target. You can install new sinks via the openmod install <package id> command and configure them in the logging.yaml. For example, this is how you would configure logging to MySQL/MariaDB instead to file: Install the MariaDB Sink: openmod install Serilog.Sinks.MariaDB Configure sink in logging.yaml: Serilog : Using : - Serilog - Serilog.Sinks.Console - Serilog.Sinks.File - Serilog.Sinks.Async - Serilog.Sinks.MariaDB # Do not forget to add your sink here WriteTo : - Name : Async # By default OpenMod logs async for performance reasons Args : configure : - Name : MariaDB Args : connectionString : \"server=...\" , # See https://www.connectionstrings.com/mysql/ tableName : \"logs\" , autoCreateTable : true - Name : Console Args : theme : \"Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console\" outputTemplate : \"[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}\" Enrich : - FromLogContext MinimumLevel : Default : Information # Only log Information or higher by default Override : # You can configure when specific events should be logged # In this example, the Microsoft.EntityFrameworkCore events below are only logged if Warning or higher Microsoft.EntityFrameworkCore.Database.Command : Warning Microsoft.EntityFrameworkCore.Infrastructure : Warning Microsoft.EntityFrameworkCore.Database.Connection : Warning Microsoft.EntityFrameworkCore.Query : Warning","title":"Logging"},{"location":"user-guide/logging/#logging","text":"OpenMod uses Serilog by default for logging. Serilog is configured through the logging.yaml in the OpenMod directory. You can find the documentation for the Serilog configuration here (you will have to convert from json to yaml). Serilog supports many sinks as logging target. You can install new sinks via the openmod install <package id> command and configure them in the logging.yaml. For example, this is how you would configure logging to MySQL/MariaDB instead to file: Install the MariaDB Sink: openmod install Serilog.Sinks.MariaDB Configure sink in logging.yaml: Serilog : Using : - Serilog - Serilog.Sinks.Console - Serilog.Sinks.File - Serilog.Sinks.Async - Serilog.Sinks.MariaDB # Do not forget to add your sink here WriteTo : - Name : Async # By default OpenMod logs async for performance reasons Args : configure : - Name : MariaDB Args : connectionString : \"server=...\" , # See https://www.connectionstrings.com/mysql/ tableName : \"logs\" , autoCreateTable : true - Name : Console Args : theme : \"Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console\" outputTemplate : \"[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}\" Enrich : - FromLogContext MinimumLevel : Default : Information # Only log Information or higher by default Override : # You can configure when specific events should be logged # In this example, the Microsoft.EntityFrameworkCore events below are only logged if Warning or higher Microsoft.EntityFrameworkCore.Database.Command : Warning Microsoft.EntityFrameworkCore.Infrastructure : Warning Microsoft.EntityFrameworkCore.Database.Connection : Warning Microsoft.EntityFrameworkCore.Query : Warning","title":"Logging"},{"location":"user-guide/permissions/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Permissions"},{"location":"user-guide/translations/","text":"TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO","title":"Translations"},{"location":"user-guide/installation/auto-updates/","text":"Managing Auto-Updates \u00b6 By default, OpenMod automatically updates itself on each server start. You can change this behavior by applying any of these: Start server with -NoOpenModAutoUpdate argument. Set OpenMod__EnableAutoUpdate environment variable to false . OpenMod will always download it's core components on the first start.","title":"Managing Auto Updates"},{"location":"user-guide/installation/auto-updates/#managing-auto-updates","text":"By default, OpenMod automatically updates itself on each server start. You can change this behavior by applying any of these: Start server with -NoOpenModAutoUpdate argument. Set OpenMod__EnableAutoUpdate environment variable to false . OpenMod will always download it's core components on the first start.","title":"Managing Auto-Updates"},{"location":"user-guide/installation/unturned/","text":"Installing OpenMod for Unturned \u00b6 Download the latest OpenMod.Unturned.Module-vX.X.X.zip from here . Copy the \"OpenMod.Unturned\" folder into the \"Modules\" folder inside the Unturned installation directory. Start your server. The first start will take a while since OpenMod will download its core components. OpenMod supports RocketMod plugins. Read the RocketMod Migration Guide if you are migrating from RocketMod. Done! Now you can start installing plugins .","title":"Installing OpenMod for Unturned"},{"location":"user-guide/installation/unturned/#installing-openmod-for-unturned","text":"Download the latest OpenMod.Unturned.Module-vX.X.X.zip from here . Copy the \"OpenMod.Unturned\" folder into the \"Modules\" folder inside the Unturned installation directory. Start your server. The first start will take a while since OpenMod will download its core components. OpenMod supports RocketMod plugins. Read the RocketMod Migration Guide if you are migrating from RocketMod. Done! Now you can start installing plugins .","title":"Installing OpenMod for Unturned"},{"location":"user-guide/migration/rocketmod/","text":"Migrating from RocketMod to OpenMod \u00b6 OpenMod has built-in support for RocketMod plugins, most RocketMod plugins should work without need for workarounds or rewrites. To use use RocketMod plugins, follow these steps: After installing OpenMod for Unturned remove the \"Rocket.Unturned\" folder from the \"Modules\" folder inside Unturned. If you were using RocketMod before, keep the \"Rocket\" folder inside your server's folder. Start your server, wait for OpenMod to load and then install the OpenMod RocketMod Bridge : openmod install OpenMod.Rocket.Unturned . To finish migration, restart your server or reload OpenMod: openmod reload . Using the OpenMod RocketMod Bridge \u00b6 You can use the OpenMod RocketMod Bridge exactly like the RocketMod module. For example, to install RocketMod plugins just add the dll files to your Rocket/Plugins folder inside your server's folder and restart or reload RocketMod: rocketmod reload . Caveats \u00b6 RocketMod plugins are not converted to OpenMod plugins, so you can not manage them from OpenMod. RocketMod is completely separated from OpenMod and has it's own configuration system, permissions system, command system etc. OpenMod commands will always override RocketMod commands when a conflict occurs. Linking RocketMod to OpenMod Permissions \u00b6 By default, the OpenMod RocketMod Bridge will use RocketMod's own Permissions.xml when handling permissions for RocketMod plugins. This might be a problem as you would have to maintain two different permission systems. The RocketMod Permission Link plugin solves this issue by forcing RocketMod to use OpenMod's permission system. Keep in mind that it may not be compatible with other permissions plugins for RocketMod. To install the RocketMod Permission Link plugin, run openmod install OpenMod.Rocket.PermissionLink and then reload or restart. Differences between the OpenMod RocketMod Bridge and RocketMod \u00b6 The OpenMod RocketMod Bridge is based on a patched version of the LDM RocketMod fork , it is not a reimplementation of the RocketMod API. This will ensure compatibility with most RocketMod plugins, including those which access private RocketMod fields via reflection. The OpenMod RocketMod Bridge is an OpenMod plugin instead of a standalone Unturned module. RocketMod does not support unloading at runtime, as it never unbinds from events. With OpenMod, you can completely unload RocketMod or OpenMod at runtime. RocketMod's command handling has been changed to utilize OpenMod's command system to avoid conflicting commands. RocketMod's logging system has been changed to proxy to OpenMod's logging system (Serilog).","title":"Migrating from RocketMod"},{"location":"user-guide/migration/rocketmod/#migrating-from-rocketmod-to-openmod","text":"OpenMod has built-in support for RocketMod plugins, most RocketMod plugins should work without need for workarounds or rewrites. To use use RocketMod plugins, follow these steps: After installing OpenMod for Unturned remove the \"Rocket.Unturned\" folder from the \"Modules\" folder inside Unturned. If you were using RocketMod before, keep the \"Rocket\" folder inside your server's folder. Start your server, wait for OpenMod to load and then install the OpenMod RocketMod Bridge : openmod install OpenMod.Rocket.Unturned . To finish migration, restart your server or reload OpenMod: openmod reload .","title":"Migrating from RocketMod to OpenMod"},{"location":"user-guide/migration/rocketmod/#using-the-openmod-rocketmod-bridge","text":"You can use the OpenMod RocketMod Bridge exactly like the RocketMod module. For example, to install RocketMod plugins just add the dll files to your Rocket/Plugins folder inside your server's folder and restart or reload RocketMod: rocketmod reload .","title":"Using the OpenMod RocketMod Bridge"},{"location":"user-guide/migration/rocketmod/#caveats","text":"RocketMod plugins are not converted to OpenMod plugins, so you can not manage them from OpenMod. RocketMod is completely separated from OpenMod and has it's own configuration system, permissions system, command system etc. OpenMod commands will always override RocketMod commands when a conflict occurs.","title":"Caveats"},{"location":"user-guide/migration/rocketmod/#linking-rocketmod-to-openmod-permissions","text":"By default, the OpenMod RocketMod Bridge will use RocketMod's own Permissions.xml when handling permissions for RocketMod plugins. This might be a problem as you would have to maintain two different permission systems. The RocketMod Permission Link plugin solves this issue by forcing RocketMod to use OpenMod's permission system. Keep in mind that it may not be compatible with other permissions plugins for RocketMod. To install the RocketMod Permission Link plugin, run openmod install OpenMod.Rocket.PermissionLink and then reload or restart.","title":"Linking RocketMod to OpenMod Permissions"},{"location":"user-guide/migration/rocketmod/#differences-between-the-openmod-rocketmod-bridge-and-rocketmod","text":"The OpenMod RocketMod Bridge is based on a patched version of the LDM RocketMod fork , it is not a reimplementation of the RocketMod API. This will ensure compatibility with most RocketMod plugins, including those which access private RocketMod fields via reflection. The OpenMod RocketMod Bridge is an OpenMod plugin instead of a standalone Unturned module. RocketMod does not support unloading at runtime, as it never unbinds from events. With OpenMod, you can completely unload RocketMod or OpenMod at runtime. RocketMod's command handling has been changed to utilize OpenMod's command system to avoid conflicting commands. RocketMod's logging system has been changed to proxy to OpenMod's logging system (Serilog).","title":"Differences between the OpenMod RocketMod Bridge and RocketMod"},{"location":"user-guide/plugins/plugin-management/","text":"Installing and Managing Plugins \u00b6 OpenMod provides commands to download, install, update and remove plugins at runtime. Note You must restart the server or reload OpenMod with openmod reload after doing any changes to installed plugins. Note For more help, you can use the help openmod command. Finding Plugins \u00b6 You can find a list of plugins at the openmod-plugins repository . You can also search for openmod-plugin on nuget.org . Installing Plugins \u00b6 There are two ways to install plugins by default: To install plugins from NuGet, install them via the openmod install <package id> command, e.g. openmod install OpenMod.Rocket.Unturned . You can also install specific versions via the openmod install <package id> <version> command. For pre release versions, add the -Pre option: openmod install <package id> -Pre or openmod install <package id> <version> -Pre . To install plugins manually, move the plugin dll file and all libraries of the plugin to the openmod/plugins directory. You can also install the libraries with openmod install <package-id> instead. Updating Plugins \u00b6 If you installed the plugin via openmod install , you can simply update it using openmod update <package id> . Like with openmod install , you can specify the version and use -Pre for pre release versions. If you installed the plugin directly as dll file, you can delete replace the old .dll file with the updated one. Removing Plugins \u00b6 If you installed the plugin via openmod install , you can simply remove it by using openmod remove <package id> . If you installed the plugin directly as dll file, you can just delete the .dll file.","title":"Installing and Managing Plugins"},{"location":"user-guide/plugins/plugin-management/#installing-and-managing-plugins","text":"OpenMod provides commands to download, install, update and remove plugins at runtime. Note You must restart the server or reload OpenMod with openmod reload after doing any changes to installed plugins. Note For more help, you can use the help openmod command.","title":"Installing and Managing Plugins"},{"location":"user-guide/plugins/plugin-management/#finding-plugins","text":"You can find a list of plugins at the openmod-plugins repository . You can also search for openmod-plugin on nuget.org .","title":"Finding Plugins"},{"location":"user-guide/plugins/plugin-management/#installing-plugins","text":"There are two ways to install plugins by default: To install plugins from NuGet, install them via the openmod install <package id> command, e.g. openmod install OpenMod.Rocket.Unturned . You can also install specific versions via the openmod install <package id> <version> command. For pre release versions, add the -Pre option: openmod install <package id> -Pre or openmod install <package id> <version> -Pre . To install plugins manually, move the plugin dll file and all libraries of the plugin to the openmod/plugins directory. You can also install the libraries with openmod install <package-id> instead.","title":"Installing Plugins"},{"location":"user-guide/plugins/plugin-management/#updating-plugins","text":"If you installed the plugin via openmod install , you can simply update it using openmod update <package id> . Like with openmod install , you can specify the version and use -Pre for pre release versions. If you installed the plugin directly as dll file, you can delete replace the old .dll file with the updated one.","title":"Updating Plugins"},{"location":"user-guide/plugins/plugin-management/#removing-plugins","text":"If you installed the plugin via openmod install , you can simply remove it by using openmod remove <package id> . If you installed the plugin directly as dll file, you can just delete the .dll file.","title":"Removing Plugins"}]}